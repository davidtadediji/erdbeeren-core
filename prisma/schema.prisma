generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  username    String
  password    String
  email       String   @unique
  role        String
  verificationCode String
  resetToken  String?  @unique
  resetTokenExpires DateTime?
  isVerified  Boolean  @default(false)
  department  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  
  ticketsAssigned  Ticket[]   
  averageResponseTime  Int?       
  averageCustomerSatisfactionScore Int?       
  averageHandlingTime  Int?      
}

model Conversation {
  id            String      @id @default(uuid())
  participantSid String?    @unique
  channelType    String
  language       String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?
  metrics        ConversationMetrics?
  strike         Int?       @default(0)
  messages       Message[]  
  tickets        Ticket[]
}

model ConversationMetrics {
  id                   Int       @id @default(autoincrement())
  conversationId       String    @unique
  avgAgentResponse     Float?
  avgCustomerResponse  Float?
  rating               Int?
  overallSentiment     Sentiment?
  overallSentimentScore Float?
  customerProfile      Json?
  customerSatisfactionScore Int?
  duration             Int?
  length               Int?
  updatedAt            DateTime?
  conversation         Conversation @relation(fields: [conversationId], references: [id])
}

model Message {
  id          String      @id @default(uuid())
  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender      String
  content     String
  sentAt      DateTime    @default(now())
  deliveredAt DateTime?
  seenAt      DateTime?
  sentiment   Sentiment?
  sentimentScore Float?
  createdAt   DateTime    @default(now())
}

model Ticket {
  id             Int         @id @default(autoincrement())
  subject        String
  description    String
  status         Status
  priority       Priority?
  assignedTo     User        @relation(fields: [userId], references: [id])
  userId   Int         
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  customerSatisfactionScore Int?
  conversationId String
  createdAt      DateTime    @default(now())
  closedAt      DateTime?
}

// Define enum for Sentiment Type
enum Sentiment {
  negative
  neutral
  positive
}

// Define enum for Status Type
enum Status {
  open
  pending
  closed
}

// Define enum for Priority Type
enum Priority {
  high
  medium
  low
}
